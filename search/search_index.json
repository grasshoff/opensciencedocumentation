{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"annotation/","text":"anNotes: a modern annotation object anNotes are annotation objects which display their content in relation to anchors of content in another pane. They can interact with other panes. An annotation is a python instance of a class which attributes can be set displayed by methods. anNote classes anNotes classes are split into functional methods without UI frontend functions and a show method that invokes the streamlit display. @dataclass class anNote : def __init__ ( self ): self . a = 3","title":"anNote"},{"location":"annotation/#annotes-a-modern-annotation-object","text":"anNotes are annotation objects which display their content in relation to anchors of content in another pane. They can interact with other panes. An annotation is a python instance of a class which attributes can be set displayed by methods.","title":"anNotes: a modern annotation object"},{"location":"annotation/#annote-classes","text":"anNotes classes are split into functional methods without UI frontend functions and a show method that invokes the streamlit display. @dataclass class anNote : def __init__ ( self ): self . a = 3","title":"anNote classes"},{"location":"code/","text":"Modules for Scholarium loaddBook () Import works Reader () Old version f\u00fcr display of book Sqltools for causa activeToken () Returns the token, the current sessionID is registered to. Returns str/None: token or None if not registered addRegToSceneList ( sceneList ) Adds Registry to the scene dictionary, if the current sessionID is not registered to a token. Parameters sceneDict: dictionary of scenes and associated scene functions type: dict Returns list: new scene dictionary addRegToScenes ( sceneDict ) Adds Registry to the scene dictionary, if the current sessionID is not registered to a token. Parameters sceneDict: dictionary of scenes and associated scene functions type: dict Returns list: new scene dictionary declareState ( table , defaultState , tokenlist = [ 'admin' ]) Returns a default State-Dictionary if the User is not logged in or hasn't saved a state yet. Returns the result of ther loadState function of a given table. Parameters table: table name that should be loaded from token.db type: str defaultState: default return if nothing is saved or user isn't logged in type: dict Returns dict: State-Dictionary getTables ( token = '' ) Loads a list of all tables saved under a token Returns list: list of table names loadGlobalAnnot ( doc , page ) Load all information stored in a table saved under a token Parameters table: name of the table to be loaded type: str Returns list: list of dictionaries containing a row each loadState ( table ) Loads the last saved row of a table saved under a token Parameters table: name of the table to be loaded type: str Returns dict: dictionary, keys are table headers, values are row information loadTable ( table , token = '' ) Load all information stored in a table saved under a token Parameters table: name of the table to be loaded type: str Returns list: list of dictionaries containing a row each loginState () Checks if the current session ID is registered to a token. Returns bool: True if User is registered, False if not saveGlobalAnnot ( doc , page , save_var ) Saves dictionary into a specified table in the database associated with the registered token. Creates the table on the first save. Table head is build from the save_var keys. Adds date and time stamps when savong data. Parameters table: name of the table data is to be saved in type: str save_var: Dictionary of variables to be saved type: dict overwrite: optional (default: True), overwrites table if True, append data if False type: bool Returns st.write: saveState ( table , save_var , overwrite = True ) Saves dictionary into a specified table in the database associated with the registered token. Creates the table on the first save. Table head is build from the save_var keys. Adds date and time stamps when savong data. Parameters table: name of the table data is to be saved in type: str save_var: Dictionary of variables to be saved type: dict overwrite: optional (default: True), overwrites table if True, append data if False type: bool Returns st.write: userAdmin ( tokenlist = [ 'admin' ]) Creates necessary folder structure for logging in and saving data (registry folder) Creates ./registry/tokens.yaml Creates .registry/user.db Updates user.db according to the token.yml Parameters tokenlist: of no token.yml exists, listelements define the first tokens in yaml and db type: list","title":"Code"},{"location":"code/#modules-for-scholarium","text":"","title":"Modules for Scholarium"},{"location":"code/#Code.scholarium.loaddBook","text":"Import works","title":"loaddBook()"},{"location":"code/#Code.scholarium.Reader","text":"Old version f\u00fcr display of book","title":"Reader()"},{"location":"code/#sqltools-for-causa","text":"","title":"Sqltools for causa"},{"location":"code/#Code.sqltools.activeToken","text":"Returns the token, the current sessionID is registered to.","title":"activeToken()"},{"location":"code/#Code.sqltools.activeToken--returns","text":"str/None: token or None if not registered","title":"Returns"},{"location":"code/#Code.sqltools.addRegToSceneList","text":"Adds Registry to the scene dictionary, if the current sessionID is not registered to a token.","title":"addRegToSceneList()"},{"location":"code/#Code.sqltools.addRegToSceneList--parameters","text":"sceneDict: dictionary of scenes and associated scene functions type: dict","title":"Parameters"},{"location":"code/#Code.sqltools.addRegToSceneList--returns","text":"list: new scene dictionary","title":"Returns"},{"location":"code/#Code.sqltools.addRegToScenes","text":"Adds Registry to the scene dictionary, if the current sessionID is not registered to a token.","title":"addRegToScenes()"},{"location":"code/#Code.sqltools.addRegToScenes--parameters","text":"sceneDict: dictionary of scenes and associated scene functions type: dict","title":"Parameters"},{"location":"code/#Code.sqltools.addRegToScenes--returns","text":"list: new scene dictionary","title":"Returns"},{"location":"code/#Code.sqltools.declareState","text":"Returns a default State-Dictionary if the User is not logged in or hasn't saved a state yet. Returns the result of ther loadState function of a given table.","title":"declareState()"},{"location":"code/#Code.sqltools.declareState--parameters","text":"table: table name that should be loaded from token.db type: str defaultState: default return if nothing is saved or user isn't logged in type: dict","title":"Parameters"},{"location":"code/#Code.sqltools.declareState--returns","text":"dict: State-Dictionary","title":"Returns"},{"location":"code/#Code.sqltools.getTables","text":"Loads a list of all tables saved under a token","title":"getTables()"},{"location":"code/#Code.sqltools.getTables--returns","text":"list: list of table names","title":"Returns"},{"location":"code/#Code.sqltools.loadGlobalAnnot","text":"Load all information stored in a table saved under a token","title":"loadGlobalAnnot()"},{"location":"code/#Code.sqltools.loadGlobalAnnot--parameters","text":"table: name of the table to be loaded type: str","title":"Parameters"},{"location":"code/#Code.sqltools.loadGlobalAnnot--returns","text":"list: list of dictionaries containing a row each","title":"Returns"},{"location":"code/#Code.sqltools.loadState","text":"Loads the last saved row of a table saved under a token","title":"loadState()"},{"location":"code/#Code.sqltools.loadState--parameters","text":"table: name of the table to be loaded type: str","title":"Parameters"},{"location":"code/#Code.sqltools.loadState--returns","text":"dict: dictionary, keys are table headers, values are row information","title":"Returns"},{"location":"code/#Code.sqltools.loadTable","text":"Load all information stored in a table saved under a token","title":"loadTable()"},{"location":"code/#Code.sqltools.loadTable--parameters","text":"table: name of the table to be loaded type: str","title":"Parameters"},{"location":"code/#Code.sqltools.loadTable--returns","text":"list: list of dictionaries containing a row each","title":"Returns"},{"location":"code/#Code.sqltools.loginState","text":"Checks if the current session ID is registered to a token.","title":"loginState()"},{"location":"code/#Code.sqltools.loginState--returns","text":"bool: True if User is registered, False if not","title":"Returns"},{"location":"code/#Code.sqltools.saveGlobalAnnot","text":"Saves dictionary into a specified table in the database associated with the registered token. Creates the table on the first save. Table head is build from the save_var keys. Adds date and time stamps when savong data.","title":"saveGlobalAnnot()"},{"location":"code/#Code.sqltools.saveGlobalAnnot--parameters","text":"table: name of the table data is to be saved in type: str save_var: Dictionary of variables to be saved type: dict overwrite: optional (default: True), overwrites table if True, append data if False type: bool","title":"Parameters"},{"location":"code/#Code.sqltools.saveGlobalAnnot--returns","text":"st.write:","title":"Returns"},{"location":"code/#Code.sqltools.saveState","text":"Saves dictionary into a specified table in the database associated with the registered token. Creates the table on the first save. Table head is build from the save_var keys. Adds date and time stamps when savong data.","title":"saveState()"},{"location":"code/#Code.sqltools.saveState--parameters","text":"table: name of the table data is to be saved in type: str save_var: Dictionary of variables to be saved type: dict overwrite: optional (default: True), overwrites table if True, append data if False type: bool","title":"Parameters"},{"location":"code/#Code.sqltools.saveState--returns","text":"st.write:","title":"Returns"},{"location":"code/#Code.sqltools.userAdmin","text":"Creates necessary folder structure for logging in and saving data (registry folder) Creates ./registry/tokens.yaml Creates .registry/user.db Updates user.db according to the token.yml","title":"userAdmin()"},{"location":"code/#Code.sqltools.userAdmin--parameters","text":"tokenlist: of no token.yml exists, listelements define the first tokens in yaml and db type: list","title":"Parameters"},{"location":"collections/","text":"Text collections Textcollections (z.B. Euler Opera Omnia, Kepler Gesammelte Werke) collection path: /Volumes/openrepo/sources/eulerOO/ textcollection_eulerOO.json Textworks (z.B. einzelne Werke, aber auch Teile z.B. Kapitel, Aufs\u00e4tze)","title":"Text collections"},{"location":"collections/#text-collections","text":"Textcollections (z.B. Euler Opera Omnia, Kepler Gesammelte Werke) collection path: /Volumes/openrepo/sources/eulerOO/ textcollection_eulerOO.json Textworks (z.B. einzelne Werke, aber auch Teile z.B. Kapitel, Aufs\u00e4tze)","title":"Text collections"},{"location":"frontend/","text":"","title":"Frontend"},{"location":"libraries/","text":"Libraries pandas > 1.3 (string type) streamlit tree, networks networkx graphics tabulate graphicviz dictionaries yaml abdicts","title":"Libraries"},{"location":"libraries/#libraries","text":"pandas > 1.3 (string type) streamlit tree, networks networkx graphics tabulate graphicviz dictionaries yaml abdicts","title":"Libraries"},{"location":"panes/","text":"","title":"Panes"}]}